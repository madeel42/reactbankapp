{"version":3,"sources":["logo.svg","services/loginService.js","services/accountServices.js","store/reducers/loginReducer.js","store/store.js","SignUp.js","Login.js","DashBoard.js","history.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","login","data","ctx","fetch","method","headers","Content-Type","body","JSON","stringify","username","password","then","resp","json","console","log","success","alert","props","history","push","signup","fData","FormData","append","name","email","amount","dob","gender","selectedFile","res","account","deleteAccount","delIndex","setState","users","updateAccount","index","state","initialData","loggedInUser","transactions","inProcess","updateUser","user","targetUser","find","nUser","id","tUser","indexOf","persistConfig","key","storage","allReducers","combineReducers","SignupReducer","arguments","length","undefined","action","newState","parse","type","accountService","payload","updatedAmount","target","nature","splice","loginService","persistedReducer","persistReducer","store","createStore","persistor","persistStore","store_store","myFunction","Signup","selectFile","evt","_this","files","handleChange","Object","defineProperty","value","preventDefault","dispatch","assertThisInitialized","render","react_default","a","createElement","onSubmit","onChange","placeholder","React","Component","Login","doLogin","DashBoard","_React$Component","_getPrototypeOf2","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","editing","withdraw","newTransaction","refs","withdrawamount","Id","Math","floor","random","date","Date","toLocaleDateString","deposit","class","react_router_dom","to","width","colspan","ref","onClick","data-toggle","aria-haspopup","aria-expanded","map","transaction","style","backgroundColor","editedValue","defaultValue","send","inherits","connect","createBrowserHistory","UserComponent","myUsers","_this2","App","es","integration_react","loading","react_router","cbh","path","component","exact","src","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a0dd760.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nlet login = {\r\n    login(data, ctx) {\r\n\r\n        fetch('/login', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: 'ali',\r\n                password: '123'\r\n            })\r\n        }).then((resp) => {\r\n            return resp.json();\r\n        }).then((resp) => {\r\n            console.log(resp);\r\n            if (resp.success) {\r\n                alert(\"userFound\");\r\n                ctx.props.history.push('/dashboard');\r\n            } else {\r\n                alert(\"current user not found\")\r\n            }\r\n        })\r\n\r\n    },\r\n    signup(data) {\r\n\r\n\r\n        let fData = new FormData();\r\n        fData.append(\"name\", data.name)\r\n        fData.append(\"email\", data.email)\r\n        fData.append(\"amount\", data.amount)\r\n        fData.append(\"dob\", data.dob)\r\n        fData.append(\"password\", data.password)\r\n        fData.append(\"gender\", data.gender)\r\n        fData.append(\"userdp\", data.selectedFile)\r\n        fetch('/signup', {\r\n            method: 'POST',\r\n\r\n            body: fData\r\n        }).then((res) => {\r\n            return res.json()\r\n        }).then((resp) => {\r\n\r\n            if (resp.success) {\r\n                alert(\"User created\");\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default login;","\r\n// import history from '../history';\r\n\r\n\r\nlet account = {\r\n    deleteAccount(delIndex, ctx) {\r\n        // /removeaccount/90/FSD\r\n        // /rmeoveaccount/:id/:city\r\n        fetch('/removeaccount/' + delIndex, {\r\n            method: 'DELETE',\r\n        }).then((resp) => {\r\n            return resp.json();\r\n        }).then((resp) => {\r\n            // history.push('/users')\r\n            ctx.setState({\r\n                users: resp.users\r\n            })\r\n        })\r\n\r\n\r\n\r\n    }\r\n,\r\n    updateAccount(index,ctx) {\r\n\r\n        let headers = {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n        fetch('/updateAccount/' + index, {\r\n          method: 'PUT',\r\n          headers: headers,\r\n          body: JSON.stringify(ctx.state.users[index])\r\n        }).then((resp) => {\r\n         return resp.json();\r\n        }).then((resp) => {\r\n          ctx.setState({\r\n            users: resp.users\r\n          })\r\n        })\r\n      }\r\n}\r\n\r\nexport default account;","import loginService from './../../services/loginService';\r\nimport accountService from './../../services/accountServices';\r\n\r\nlet initialData = {\r\n    loggedInUser: {\r\n        transactions: [],\r\n    },\r\n    inProcess: false,\r\n    users: [],\r\n\r\n};\r\nfunction updateUser(users, user) {\r\n\r\n    let targetUser = users.find((nUser) => {\r\n\r\n        return nUser.id == user.id;\r\n\r\n    })\r\n\r\n    let tUser = users.indexOf(targetUser);\r\n\r\n    users[tUser] = user\r\n}\r\n\r\n\r\nexport function SignupReducer(state = initialData, action) {\r\n\r\n    let newState = JSON.parse(JSON.stringify(state));\r\n\r\n    switch (action.type) {\r\n\r\n        case 'item-Updated':\r\n            accountService.updateAccount(action.payload, action.ctx);\r\n            break;\r\n        case 'ITEM_DELETE':\r\n            accountService.deleteAccount(action.payload, action.ctx);\r\n            break;\r\n\r\n        case 'TRANSACTION_UPDATED':\r\n            newState.loggedInUser.transactions[action.payload.index].amount = action.payload.updatedAmount;\r\n            updateUser(newState.users, newState.loggedInUser);\r\n            return newState;\r\n            break;\r\n        case 'Edit_Tranasaction':\r\n\r\n            if (newState.loggedInUser.transactions[action.target].nature == 'Deposit') {\r\n                newState.loggedInUser.amount -= +newState.loggedInUser.transactions[action.target].amount;\r\n            }\r\n            else {\r\n                newState.loggedInUser.amount += +newState.loggedInUser.transactions[action.target].amount;\r\n\r\n            }\r\n            updateUser(newState.users, newState.loggedInUser);\r\n\r\n            return newState\r\n            break;\r\n        case 'DELETE_TRANSACTION':\r\n\r\n            if (newState.loggedInUser.transactions[action.target].nature == 'Deposit') {\r\n                newState.loggedInUser.amount -= +newState.loggedInUser.transactions[action.target].amount;\r\n            }\r\n            else {\r\n                newState.loggedInUser.amount += +newState.loggedInUser.transactions[action.target].amount;\r\n\r\n            }\r\n            newState.loggedInUser.transactions.splice(action.target, 1);\r\n            updateUser(newState.users, newState.loggedInUser);\r\n            return newState;\r\n            break;\r\n\r\n\r\n        case 'persist/REHYDRATE':\r\n            if (action.payload) {\r\n                newState = action.payload.SignupReducer;\r\n                updateUser(newState.users,newState.loggedInUser);\r\n            }\r\n            break;\r\n\r\n        case \"Withdraw\":\r\n            newState.loggedInUser.amount -= +(action.payload.amount);\r\n\r\n            newState.loggedInUser.transactions.push(action.payload);\r\n            updateUser(newState.users, newState.loggedInUser);\r\n\r\n            return newState\r\n            break;\r\n\r\n        case \"Deposit\":\r\n            newState.loggedInUser.amount += +(action.payload.amount);\r\n            newState.loggedInUser.transactions.push(action.payload);\r\n            updateUser(newState.users, newState.loggedInUser);\r\n\r\n            return newState\r\n            break;\r\n\r\n        case \"CREATING_USER\":\r\n            loginService.signup(action.data);\r\n\r\n            // newState.users.push(action.data);\r\n\r\n            // alert(\"User created\");\r\n            // updateUser(newState.users, newState.loggedInUser);\r\n            // action.ctx.props.history.push('/');\r\n\r\n\r\n\r\n            break;\r\n\r\n        case \"USER_LOGGING_IN\":\r\n            loginService.login(action.data, action.ctx);\r\n            //         let userFound = newState.users.find((user) => {\r\n            //             if (user.name == action.data.name && user.password == action.data.password) {\r\n            //                 return true\r\n            //             }\r\n            //         });\r\n            //         if (userFound) {\r\n            //             newState.loggedInUser = userFound;\r\n            //             alert(\"User found\");\r\n            //             action.ctx.props.history.push('/info');\r\n            //             return newState;\r\n            //         } else {\r\n            //             alert(\"User not found\");\r\n            //         }\r\n            // }\r\n            // return newState;\r\n            break;\r\n    }\r\n    return newState;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export function loginReducer(state = LoggedIn, action) {\r\n\r\n//     if (action.type == 'sending') {\r\n//         return action.data\r\n\r\n//     }\r\n//     return state.Logged.user\r\n\r\n// }\r\n\r\n// export function displayReducer(oldData = LoggedIn, action) {\r\n//     if (action.type == 'show') {\r\n//         return {\r\n//             status: true\r\n//         }\r\n\r\n//     }\r\n\r\n//     else if (action.type == 'hide') {\r\n//         return {\r\n//             status: false\r\n//         }\r\n//     }\r\n//     return oldData\r\n// }\r\n\r\n// export function dashBoardReducer(state, action) {\r\n//     return {\r\n//         type: 'cghh',\r\n\r\n//     }\r\n// }\r\n\r\n","\r\nimport {createStore,combineReducers} from \"redux\";\r\nimport {SignupReducer} from '../store/reducers/loginReducer'\r\n\r\n\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web and AsyncStorage for react-native\r\n\r\n// export default store;\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n}\r\n\r\nlet allReducers = combineReducers({SignupReducer});\r\nconst persistedReducer = persistReducer(persistConfig, allReducers)\r\n\r\n// debugger;\r\nlet store = createStore(persistedReducer)\r\nlet persistor = persistStore(store)\r\n\r\nexport default () => {\r\n    return { store, persistor }\r\n}\r\n","\r\nimport React from 'react';\r\nimport myFunction from './store/store';\r\nlet store = myFunction().store\r\n\r\nexport default class Signup extends React.Component {\r\n  selectFile = (evt) => {\r\n    this.setState({\r\n      selectedFile: evt.target.files[0]\r\n    })\r\n\r\n\r\n  }\r\n\r\n\r\n  handleChange = (evt) => {\r\n\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n\r\n  }\r\n  signup = (evt) => {\r\n    this.state.transactions = [];\r\n\r\n    evt.preventDefault();\r\n\r\n    console.log(this.state);\r\n\r\n    store.dispatch({\r\n      ctx: this,\r\n      type: \"CREATING_USER\",\r\n      data: this.state\r\n    });\r\n\r\n  }\r\n  render = () => {\r\n    return <div id=\"signup-comp\">\r\n      <form onSubmit={this.signup}>\r\n\r\n        <h2>SIGN UP</h2>\r\n\r\n        <div>\r\n          <input onChange={this.handleChange} type=\"text\" name=\"name\" placeholder=\"Name \" />\r\n        </div>\r\n\r\n        <div>\r\n          <input onChange={this.handleChange} type=\"text\" name=\"email\" placeholder=\"Email \" />\r\n        </div>\r\n\r\n        <div>\r\n          <input onChange={this.handleChange} type=\"number\" name=\"amount\" placeholder=\"Initial AMount \" />\r\n        </div>\r\n\r\n        <div>\r\n          <input onChange={this.handleChange} type=\"date\" name=\"dob\" placeholder=\"Date of birth \" />\r\n        </div>\r\n\r\n        <div>\r\n          <input onChange={this.handleChange} type=\"password\" name=\"password\" placeholder=\"Password\" />\r\n        </div>\r\n\r\n        <p>\r\n          <label>\r\n            <input onChange={this.handleChange} name=\"gender\" value=\"MALE\" type=\"radio\" />\r\n            <span>Male</span>\r\n          </label>\r\n        </p>\r\n        <p>\r\n          <label>\r\n            <input onChange={this.handleChange} name=\"gender\" value=\"FEMALE\" type=\"radio\" />\r\n            <span>Female</span>\r\n          </label>\r\n          <img id=\"filePreview\" />\r\n        </p>\r\n        <div>\r\n          <input onChange={this.selectFile} type=\"file\" name=\"userdp\" />\r\n          <div>\r\n            <button type=\"submit\">Submit</button>\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n      </form>\r\n\r\n    </div>\r\n  }\r\n}","import React from 'react';\r\nimport myFunction from './store/store';\r\nlet store = myFunction().store\r\n\r\nexport default class Login extends React.Component {\r\n\r\n\r\n    handleChange = (evt) => {\r\n  \r\n      this.props.history.push('/login')\r\n  \r\n      this.setState({\r\n        [evt.target.name]: evt.target.value\r\n      });\r\n  \r\n    }\r\n    doLogin = (evt) => {\r\n  \r\n      evt.preventDefault();\r\n  console.log(this.state);\r\n      store.dispatch({\r\n        ctx: this,\r\n        type: \"USER_LOGGING_IN\",\r\n        data: this.state\r\n      });\r\n  \r\n    }\r\n    render = () => {\r\n      return <div id=\"signupIn\">\r\n        <form onSubmit={this.doLogin}>\r\n  \r\n          <h2>Login Account</h2>\r\n  \r\n          <div>\r\n            <input onChange={this.handleChange} type=\"text\" name=\"name\" placeholder=\"Name \" />\r\n          </div>\r\n  \r\n          <div>\r\n            <input onChange={this.handleChange} type=\"password\" name=\"password\" placeholder=\"Password \" />\r\n          </div>\r\n          <button type=\"submit\">Submit</button>\r\n  \r\n  \r\n        </form >\r\n  \r\n      </div >\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport myFunction from './store/store';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nlet store = myFunction().store\r\nexport class DashBoard extends React.Component {\r\n  state = {\r\n    editing: false\r\n  }\r\n\r\n\r\n\r\n  withdraw = () => {\r\n    let newTransaction = {\r\n      type: \"Cash\",\r\n      nature: \"Withdraw\",\r\n      amount: this.refs.withdrawamount.value,\r\n      Id: Math.floor((Math.random() * 1000000) + 1),\r\n      date: new Date().toLocaleDateString()\r\n    }\r\n\r\n    store.dispatch({\r\n      type: 'Withdraw',\r\n      payload: newTransaction,\r\n    })\r\n\r\n  }\r\n\r\n\r\n  deposit = () => {\r\n\r\n    let newTransaction = {\r\n      type: \"Cash\",\r\n      nature: \"Deposit\",\r\n      amount: this.refs.withdrawamount.value,\r\n      Id: Math.floor((Math.random() * 1000000) + 1),\r\n      date: new Date().toLocaleDateString()\r\n    }\r\n\r\n\r\n    store.dispatch({\r\n      type: 'Deposit',\r\n      payload: newTransaction,\r\n    })\r\n\r\n  }\r\n\r\n\r\n  render = () => {\r\n\r\n    return <div id=\"detail\">\r\n      <div>\r\n        <nav>\r\n          <div class=\"nav-wrapper\">\r\n            <a id='welcomed' class=\"brand-logo\"> Welcome {this.props.data.loggedInUser.name}</a>\r\n            <a class=\"brand-logo\">THE ISLAMIC BANK</a>\r\n            <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\r\n              <Link to='/'><li><a id=\"logOut\"><i>Log Out</i></a></li></Link>\r\n\r\n              {/* <li><a id=\"editProfile\"><i>Edit Profile</i></a></li> */}\r\n\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      <div id='details'>\r\n        <table width=\"100%\">\r\n          <tr>\r\n            <td colspan=\"3\">\r\n              <h1>\r\n                <pre >E-Banking </pre>\r\n              </h1>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>NAME</td>\r\n            <td id=\"accountName\">{this.props.data.loggedInUser.name}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Balance</td>\r\n            <td id=\"accountBalance\" ref=\"accountBalance\" >{this.props.data.loggedInUser.amount}</td>\r\n          </tr>\r\n          <tr>\r\n            <td><input id=\"withdrawamount\" type=\"text\" ref=\"withdrawamount\" /></td>\r\n            {/* <!-- WITHDRAW Button --> */}\r\n            <td>\r\n              <a onClick={this.withdraw} id=\"withdrawBTN\" class=\"waves-effect waves-light btn\">WITHDRAW</a>\r\n            </td>\r\n            {/* <!-- Deposit Button --> */}\r\n            <td>\r\n              <a onClick={this.deposit} id=\"depositBTN\" class=\"waves-effect waves-light btn\">DEPOSIT</a>\r\n            </td>\r\n            <td>\r\n              {/* <!-- Drop Down List --> */}\r\n              <div class=\"btn-group\">\r\n                <button type=\"button\" class=\"btn btn-danger\" id=\"transferAmmount\">Transfer</button>\r\n                <button type=\"button\" class=\"btn btn-danger dropdown-toggle dropdown-toggle-split\"\r\n                  data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                  <span class=\"sr-only\">Toggle Dropdown</span>\r\n                </button>\r\n                <div class=\"dropdown-menu\" id=\"drop\">\r\n\r\n                </div>\r\n              </div>\r\n            </td>\r\n            <td>\r\n              <div>\r\n                <h3 id=\"rN\"></h3>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n\r\n        </table>\r\n\r\n\r\n\r\n\r\n        <table id=\"dashBoard\" ref='dashBoard' class=\"centered\">\r\n          <thead>\r\n            <tr>\r\n              <th> <select name=\"\" id=\"transactionFilter\">\r\n                <option value=\"All\">All</option>\r\n                <option value=\"Deposit\">Deposit</option>\r\n                <option value=\"Withdraw\">Withdraw</option>\r\n              </select></th>\r\n            </tr>\r\n\r\n            <tr>\r\n              <th>DATE</th>\r\n              <th>NATURE</th>\r\n              <th>TRANSACTION ID</th>\r\n              <th>AMOUNT</th>\r\n              <th>Delete</th>\r\n              <th>Edit?</th>\r\n\r\n            </tr>\r\n            {\r\n              this.props.data.loggedInUser.transactions.map((transaction, index) => {\r\n                return <tr style={{backgroundColor:transaction.nature==\"Deposit\"?\"grey\":'darkgrey'}}>\r\n                  <td>{transaction.date}</td>\r\n                  <td>{transaction.nature}</td>\r\n                  <td>{transaction.Id}</td>\r\n                  <td>{transaction.amount}</td>\r\n                  <td> {this.state.editing ? <input onChange={(evt) => {\r\n                    this.setState({\r\n                      editedValue: evt.target.value\r\n                    })\r\n                  }} defaultValue={transaction.amount} /> : transaction.amount}</td>\r\n                  <td><button onClick={() => {\r\n                    this.props.send({\r\n                      type: 'DELETE_TRANSACTION',\r\n                      target: index\r\n                    })\r\n                  }}> Delete</button></td>\r\n                  <td>\r\n                    {!this.state.editing && <button onClick={() => {\r\n                      this.setState({\r\n                        editing: true\r\n                      });\r\n                    }}>EDIT</button>\r\n                    }\r\n                    {this.state.editing && <button onClick={() => {\r\n\r\n                      this.props.send({\r\n                        type: 'TRANSACTION_UPDATED',\r\n                        payload: {\r\n                          index: index,\r\n                          updatedAmount: this.state.editedValue\r\n                        }\r\n\r\n                      })\r\n\r\n                      this.setState({\r\n                        editing: false\r\n                      });\r\n\r\n                    }}>Done</button>\r\n                    }\r\n                  </td>\r\n\r\n\r\n\r\n\r\n                </tr>\r\n\r\n              })\r\n\r\n            }\r\n          </thead>\r\n\r\n          <tbody id=\"transactionsTable\">\r\n\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n  }\r\n}\r\nexport default connect((store) => {\r\n\r\n  return {\r\n    data: store.SignupReducer\r\n  }\r\n\r\n}, function (dispatch) {\r\n  return {\r\n    send: dispatch\r\n  }\r\n})(DashBoard)\r\n","import { createBrowserHistory } from 'history';\r\n \r\n export default createBrowserHistory();","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Link, Router, Route } from 'react-router-dom';\nimport Signup from '../src/SignUp';\nimport Login from '../src/Login';\nimport DashBoard from '../src/DashBoard';\nimport  cbh  from './history';\nimport myFunction from './store/store';\n\nlet store = myFunction().store\n\n\n\nclass UserComponent extends React.Component {\n\n  state = {\n    users: [\n\n    ]\n  }\n  constructor(props) {\n    super(props);\n    fetch('/users').then((resp) => {\n\n      return resp.json();\n\n    }).then((resp) => {\n\n      console.log(resp.myUsers);\n\n      this.setState({\n        users: resp.myUsers\n      })\n\n    });\n\n  }\n  updateAccount = (index) => {\n\n    store.dispatch({\n      type:'item-Updated',\n      payload:index,\n      ctx:this\n    })\n  }\n  deleteAccount = (delIndex) => {\n\n\n    store.dispatch({\n     \n      type:\"ITEM_DELETE\",\n      payload:delIndex,\n      ctx:this\n    })\n\n  }\n  render() {\n    return <table><h1>Users</h1>\n      {this.state.users.map((user, index) => {\n          return <tr>\n            <td><input value={user.name} onChange={(evt) => {\n              user.name = evt.target.value;\n              this.setState({\n                users: this.state.users\n              })\n            }} /></td>\n            <td>{user.email}</td>\n            <td>{user.password}</td>\n            <td><button onClick={() => {\n              this.deleteAccount(index)\n            }}>DELETE</button></td>\n            <td><button onClick={() => {\n              this.updateAccount(index)\n            }}>UPDATE</button></td>\n          </tr>\n        })\n      }\n    </table>\n\n\n  }\n\n}\nexport default class App extends React.Component {\n  render = () => {\n    return <Provider store={store}>\n      <PersistGate loading={null} persistor={myFunction().persistor}>\n        <Router history={cbh}>\n          <Route path=\"/info\" component={DashBoard} />\n          <Route path=\"/new\" component={Signup} />\n          <Route path=\"/login\" component={Login} />\n          <Route path='/users' component={UserComponent} />\n          <Route exact path=\"/\" render={() => {\n            return <div> <div>\n              <Link to=\"/\">\n                <img id='bankimg' src=\"bank1.png\" />\n              </Link>\n            </div>\n              <Link to=\"/new\" id=\"signupBTN\" class=\"waves-effect waves-light btn\">\n                New USer\n                 </Link>\n              <Link to=\"/login\" id=\"signinBTN\" class=\"waves-effect waves-light btn\">\n                SIgn In\n             </Link>\n            </div>\n          }} />\n        </Router></PersistGate>\n    </Provider>\n  }\n}\n\n\n\n// npx create-react-app my-app\n// cd my-app\n// npm start\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}